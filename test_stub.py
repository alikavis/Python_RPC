#!/usr/bin/env pyth
# -*- coding: utf-8 -*-

from __future__ import division
import numbers, json, jsonpickle, Pyro4, socket, select, exceptions, inspect, sys

'''Automatically generated client stub script.
   Please do not edit this file by any means'''

MSGLEN = 4096

class test_stub:
    def __init__(self, server, timeout=10000, retry_count=5):
        self.server = server
        self.timeout = timeout
        self.retry_count = retry_count

    def send_request(self, func_name, serialized_data, soc):
        param_length = len(serialized_data)
        data = json.dumps({'size' : param_length, 'func' : func_name, 'param' : serialized_data})
        msg_len = len(data)
        sent_amount = 0
        while sent_amount < msg_len:
            temp = soc.send(data[sent_amount:])
            if temp == 0:
                raise IOError('Remote server socket disconnected')
            sent_amount += temp

        return 1

    def receive_response(self, soc, timeout):
        data = ''
        try:
            check = select.select([soc], [], [], timeout)
            if check[0]:
                data = soc.recv(MSGLEN)
                if data == '':
                    raise IOError(2, 'Remote server socket disconnected')
            else:
                raise IOError(2, 'Error while waiting response from remote server')
        except select.error as err:
            raise err

        return data

    def func1(self, a, b, id):
        # apply necessary type checkings
        if not isinstance(a, numbers.Number) or not isinstance(b, numbers.Number):
            return None, 'Invalid input arguments'

        # locate the server and retrieve connection information
        Pyro4.config.REQUIRE_EXPOSE = False
        try:
            name_server = Pyro4.locateNS()
        except NamingError:
            print 'Client Name Server Error:'
            print ''.join(Pyro4.util.getPyroTraceback())
            return None, 'Failed to locate name server'

        uri = name_server.lookup(self.server)
        remote_server = Pyro4.Proxy(uri)
        server_ip = remote_server.get_host()
        server_port = remote_server.get_port()
        print 'Located remote server at ' + server_ip + ':' + str(server_port)

        # marshall parameters, first parameter is the function call id
        param_list = [id, a, b]
        marshalled_param = jsonpickle.encode(param_list)
        func_name = inspect.stack()[0][3]

        # send a function call request to server skeleton
        soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            soc.connect((server_ip, int(server_port)))
        except socket.error as err:
            print 'Client Socket Connection Error:\n {0}: {1}'.format(err.no, err.strerror)
            soc.shutdown()
            soc.close()
            return None, 'Failed to connect to the remote server'

        try:
            status = self.send_request(func_name, marshalled_param, soc)
        except IOError as err:
            print 'Client Remote Server Connection Error\n: {}'.format(err[0])
            soc.shutdown(1)
            soc.close()
            return None, 'Problem while communicating with the remote server'

        # wait for an answer and unmarshall return types
        try:
            response = self.receive_response(soc, self.timeout/1000)
        except (IOError, select.error) as err:
            print 'Client Remote Server Response Error\n{0}: {1}'.format(err[0], err[1])
            return None, 'No valid response received from remote server'

        json_obj = json.loads(response)
        if json_obj['size'] != len(ret_param):
            print 'Client invalid parameter marshalling from server'
            return None, 'Return paramater size does not match with checksum'

        retval_1, retval_2 = jsonpickle.decode(json_obj['param'])

        # return
        if isinstance(retval_1, numbers.Number) and isinstance(retval_2, str):
            return [retval_1, retval_2], 'OK'
        else:
            return None, 'Invalid return value types'
